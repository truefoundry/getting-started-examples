sql_task:
  description: >
    First, generate an optimized and accurate ClickHouse SQL query based on the userâ€™s query. Make sure that only relevant fields are selected and queries are efficient.
    Then, always execute the generated SQL query against ClickHouse using a tool call.
    Please verify if you made the tool call to execute the sql query against clickhouse. If not retry go back to the previous step and make the tool call.

    User Query: {topic}

    The query should be executed against the 'request_logs' table, which contains
    the requests for the calls made to an LLM. The table structure is defined below 
    in the format of columnName: type: description:

    - id: String: This is the row id which is a random string. Not very useful in queries.
    - model_id: String: The id of the model to which the LLM prompt was passed. Random string and not very useful in query generation.
    - model_name: String: The name of the model to which the LLM prompt was passed. The possible values are unknown.
    - request_type: String: This can be either chat, completion, embedding, or rerank. This is used to filter the logs for different model types.
    - tenant_name: String: Name of the tenant from which the request was made.
    - username: String: Email or name of the user who made the request.
    - prompt: String: The actual prompt that was passed to the LLM. This can be null if the user has decided not to log the prompt.
    - response: String: The response of the LLM - can be null if the user has decided not to log the response.
    - input_tokens: UInt64: Number of tokens in the input.
    - output_tokens: UInt64: Number of tokens in the output.
    - latency_in_ms: Float32: Time taken to get the response from the LLM in milliseconds.
    - cost: Float32: Cost of the request in USD.
    - error_code: UInt16: Error code in case the request errors out (e.g., 0, 404, 503, etc.).
    - error_detail: String: Additional details about the error.
    - metadata: Map(LowCardinality(String), String): Metadata associated with the request.
    - applied_configs: Map(LowCardinality(String), Map(LowCardinality(String), String)): Configuration settings applied to the request.
    - created_at: DateTime64(9) Delta(8), ZSTD(1): The timestamp when the request was made.

    Clickhouse has slighlty different syntax rules than MySQL or PostgreSQL. Please make sure to use the correct syntax for Clickhouse.Clickhouse has slighlty different syntax rules than MySQL or PostgreSQL. Please make sure to use the correct syntax for Clickhouse.
    Syntax rule: Use toIntervalXXX(N) (e.g., toIntervalDay(30)) instead of INTERVAL N UNIT (e.g., INTERVAL 30 DAY) for interval arithmetic in ClickHouse.
    Syntax rule: Do not end in a semicolon (;) in the query. Only end with a newline.
  expected_output: >
    A structured response that follows the SQLQueryResult format:
    - query (str): The SQL query that was executed.
    - column_names (List[str]): List of column names in the query result.
    - rows (List[List[str]]): List of row values, where each row is a list of column values.
    - error (Optional[str]): Error message if the query failed.
  agent: sql_writer

plot_task:
  description: >
    Generate an appropriate data visualization based on SQL query results from the 'request_logs' table.
    The data is provided in a tabular format with columns separated by ' | ' and rows separated by newlines.

    Choose appropriate visualizations based on the data type and relationships:
    - Time series plots for metrics over time using 'created_at'.
    - Bar charts for categorical data such as 'model_name', 'request_type', and 'tenant_name'.
    - Histograms or distributions for numerical columns like 'input_tokens', 'output_tokens', 'latency_in_ms', and 'cost'.
    - Scatter plots to show relationships between numerical metrics.

    Ensure the visualization includes:
    - Clear title describing the insight.
    - Properly labeled axes with units where applicable.
    - Legends for multiple series.
    - Accessible color schemes.

    Rules: 
    - The value of the x-axis should be a column name from the data.
    - Generate only one plot/visualization.

  expected_output: >
    A structured response following the VisualizationRequest format:
    - plot_path (str): The path to the plot file. This is the output of the plot tool exactly. 
    - plot_type (str): The type of plot to create.
    - x_col (str): The column used for the x-axis.
    - y_col (Optional[str]): The column used for the y-axis, if applicable.
    - title (Optional[str]): The title of the plot.
    - hue (Optional[str]): The column used for color grouping, if applicable.
  agent: plot_writer